/*
 * This build file was generated by the Gradle 'init' task.
 *
 * This generated file contains a commented-out sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * user guide available at https://docs.gradle.org/3.5/userguide/tutorial_java_projects.html
 */

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.TabsToSpaces
import org.apache.tools.ant.filters.ReplaceTokens
import java.util.regex.Matcher;	
import java.util.regex.Pattern;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.io.File; 

////////////////////////////////////////////////////////////

task form_other_file {
		doLast{
			//Lib lib= new Lib();
			//hello();
			//String srcpath = projectDir.toString()+"\\src\\main\\java\\isemba\\" + project.name + ".java";
			//println(CHeading(srcpath));
			println(timestamp());
			//GroovyClass g = new GroovyClass()
  		//g.foo()
		}
	}
/*
  ExtraPropertiesExtension
  https://docs.gradle.org/3.4.1/dsl/org.gradle.api.plugins.ExtraPropertiesExtension.html
  
  project.ext.set("myProp", "myValue")
  assert project.myProp == "myValue"

  project.myProp = "anotherValue"
  assert project.myProp == "anotherValue"
  assert project.ext.get("myProp") == "anotherValue"
Method	Description
get(name)	
Returns the value for the registered property with the given name.
has(name)	
Returns whether or not the extension has a property registered via the given name.
set(name, value)	
Updates the value for, or creates, 
the registered property with the given name to the given value. 
*/
/*
how-to-create-a-method-in-a-file-used-in-apply-from-myfile
https://discuss.gradle.org/t/how-to-create-a-method-in-a-file-used-in-apply-from-myfile/4876
Methods declared in an applied script aren't visible outside that script. 
However, you can instead use an extra property:
ext.hello = { println "this works" }
apply from: "some/script.gradle"
hello() // shorthand for 'hello.call()'
*/

ext.timestamp = {
	Date date = new Date();
	//SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
	//SimpleDateFormat sdf2 = new SimpleDateFormat("yyyy年MM月dd日 HH時mm分ss秒");
	SimpleDateFormat sdf3 = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
	String ts = "Time-stamp: <"+ sdf3.format(date)+ " kahata>";
	//System.out.println(ts);
	return ts;
}

ext.CHeading = {
	//https://eng-entrance.com/java-file-path
	//pathname = "C:\\temp\\abc\\def.txt";//[1]
  def pathname = project.ext.srcpath;
	File file = new File(pathname);//[2]
	String localurl = file.getAbsolutePath().replace("\\","/");
	localurl = localurl.replace("F:/","http://localhost/f/");
	//System.out.println("[3] getPath():[" + file.getPath() + "]");
  //System.out.println("[4] getAbsolutePath():[" + file.getAbsolutePath() + "]");
  //System.out.println("[5] getParent():[" + file.getParent() + "]");
  //System.out.println("[6] getName():[" + file.getName() + "]");
	String templatepath = "C:\\home\\hidemaru\\template\\c_heading_001.txt";
	BufferedReader bufferedReader = new BufferedReader(new FileReader(templatepath));
  StringBuffer stringBuffer = new StringBuffer();
  String line = null;
  while((line =bufferedReader.readLine())!=null){
   stringBuffer.append(line).append("\n");
  }
	//if (file.exists()){
		try{
			String text = stringBuffer.toString();
			text = text.replace("%%FILEEXT%%", getFileExtension(file.getAbsolutePath()));
			text = text.replace("%%FILENAME%%", file.getName());
			text = text.replace("%%FILEPATH%%", file.getAbsolutePath());
			text = text.replace("%%LOCALURL%%", localurl);
			text= text.replace("%%TIMESTAMP%%", timestamp());
			//System.out.println(text);
			return text;
		}
		catch (Exception ex){
			String message = ex.Message.ToString();
			System.out.println(message);
			return stringBuffer.toString();
		}
	//}
}

/**
 * ファイル名から拡張子を返します。
 * http://chat-messenger.net/blog-entry-38.html
 * @param fileName ファイル名
 * @return ファイルの拡張子
 */
public static String getFileExtension(String fileName) {
  if (fileName == null) return null;
  int point = fileName.lastIndexOf(".");
  if (point != -1) {
   return fileName.substring(point + 1);
  }
  return fileName;
}
